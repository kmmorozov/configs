#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
#    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     127.0.0.1 local2
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
#frontend main
#    bind *:5000
#    acl url_static       path_beg       -i /static /images /javascript /stylesheets
#    acl url_static       path_end       -i .jpg .gif .png .css .js
#
#    use_backend static          if url_static
#    default_backend             app
#
##---------------------------------------------------------------------
## static backend for serving up images, stylesheets and such
##---------------------------------------------------------------------
#backend static
#    balance     roundrobin
#    server      static 127.0.0.1:4331 check
#
##---------------------------------------------------------------------
## round robin balancing between the various backends
##---------------------------------------------------------------------
#backend app
#    balance     roundrobin
#    server  app1 127.0.0.1:5001 check
#    server  app2 127.0.0.1:5002 check
#    server  app3 127.0.0.1:5003 check
#    server  app4 127.0.0.1:5004 check
###########################userlist###################################################
#в открытом виде
userlist mycredentials
   user kirill  insecure-password 1985
   user nikolay  insecure-password 2013
   user konstantin  insecure-password 2016
# в хеше
#https://www.mkpasswd.net/index.php

userlist mycredentials2
   user anna password $5$NabWwyMwve.3Vmtx$BpdKLBmJo3K76/kXEPnffN/unaUeuoXLzdewvGycN45




####################################HTTP#############################################
frontend test1 
	mode http
	bind *:80
	bind *:443 ssl crt /etc/ssl/certs/xzxzxz.pem
	http-request redirect scheme https unless { ssl_fc }
	default_backend apache3 



frontend test2
   bind *:81
   http-request auth unless { http_auth(mycredentials2) }
   default_backend apache3





#bez proverok
##backend apache
#	balance roundrobin
#	server ap1 192.168.20.49:80
#	server ap3 192.168.20.48:80
#	server ap2 192.168.20.51:80

#s proverkami
backend apache
#	balance roundrobin # по очереди с весами
	#balance leastconn # не работают веса, подключаемся к которому меньше всего подключений
	#balance first # первый доступный сервер из списка
	#balance uri  #  конкретный uri запрашиватеся с конкрутного сервера 
	#balance source # ip источника связывается с сервером 
	#balance url_param # Хеширование производится по парамету запроса
	balance hdr(User-Agent) #Хешируются параметры http заголовка
	server ap1 192.168.20.49:80 check inter 500  fall 10 rise 10 weight 10 
	server ap3 192.168.20.48:80 check inter 3000 fall 10 rise 10 weight 10 
	server ap2 192.168.20.51:80 check inter 4000 fall 10  rise 10 weight 10
	
	#check проверять 
	#inter через сколько проверять 
	#fall через сколько неудачных проверок считать сервер упавшим 
	#rise через сколько успешных попыток считать сервер доступным    
	#weight вес сервера при распределениие нагрузки
#########################################################################################

backend apache2
#https://www.haproxy.com/blog/how-to-enable-health-checks-in-haproxy
	option httpchk # вместо проверок доступности порта стали дергать http

	server ap1 192.168.20.49:80 check inter 500  fall 10 rise 10 weight 10
        server ap3 192.168.20.48:80 check inter 3000 fall 10 rise 10 weight 10
        server ap2 192.168.20.51:80 check inter 4000 fall 10  rise 10 weight 10
backend apache3
#https://www.haproxy.com/blog/how-to-enable-health-checks-in-haproxy
        option httpchk # вместо проверок доступности порта стали дергать http
  	#http-check send meth GET uri /health #для новых версий 
  	#http-check expect status 200 # для новых версий 
        server ap1 192.168.20.49:80 check inter 500  fall 10 rise 10 weight 10
        server ap3 192.168.20.48:80 check inter 3000 fall 10 rise 10 weight 10
        server ap2 192.168.20.51:80 check inter 4000 fall 10  rise 10 weight 10

#######################################################################################
#########################tcp###########################################################
frontend mysql
   mode tcp
   bind :3306
   default_backend mysql_servers

backend mysql_servers
   mode tcp
   balance roundrobin
   server s1 192.168.20.49:3306 check inter 500  fall 10 rise 10 weight 1
   server s2 192.168.20.48:3306 check inter 500  fall 10 rise 10 weight 5
   server s3 192.168.20.51:3306 check inter 500  fall 10 rise 10 weight 10


######################################################################################
##########################ACL########################################################
#HEADER ACL

frontend test3


	bind *:82
	acl site1 hdr(host) -i www.test1.local
	acl site2 hdr(host) -i www.test2.local
	acl site3 hdr(host) -i www.test3.local
	use_backend apache if site1
	use_backend apache2 if site2
	use_backend apache3 if site3
	
	acl is_static path -i -m beg /static/
	use_backend apache3 if is_static

########################################################################################
###########################WHITELIST####################################################


frontend test4
	bind *:83
	mode http
 	acl is-blocked-ip src -f /etc/haproxy/blocklisted.ips
        http-request deny if is-blocked-ip

        default_backend apache2

frontend stats
    mode http
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if LOCALHOST
